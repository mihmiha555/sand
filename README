Sand - игрушечный sandbox, сделанный с использованием технологии VTX. Он может
запускать 32-битный код под контролем гипервизора. На код накладываются
ограничения:

1. Он может использовать для хранения состояния только регистры и стек (растет
с адреса 4096 вниз).
2. Он не должен переходить по адресам ниже 4096 (там расположен стек) и выше
8192, там память не отображена.
3. Длина кода не может превышать 4096 байт.

Код запускается при помощи утилиты sandctl, ей в качестве аргумента передается
последовательность из байт в HEX-кодах. Это код, который требуется запустить.
Перед началом выполнения регистровое состояние sandbox сбрасывается в нуль. В
случае успешного исполнения кода под контролем гипервизора sandctl выводит
финальное состояние регистров eax, ebx, ecx и edx.

sandctl обращается к драйверу sand, который и реализует функциональность
гипервизора. Обращение происходит через вызов IOCTL misc-устройства /dev/sand.

Задания (необязательно выполнять по порядку, если нет зависимостей;
необязательно выполнять все задания):

1. Сделайте так, чтобы при деинициализации модуля на всех процессорах в системе
вызывалась инструкция VMXOFF.

2. Можно написать гостевой код, который никогда не завершится. sandbox так и
зависнет в контексте ядра. Сделайте возможность досрочного завершения такого
зависшего кода. Подойдет любой способ, позволяющий завершить sandbox раньше по
таймауту.

3. Ограничение #1 мешает писать функциональный код для исполнения в sandbox.
Сделайте так, чтобы по адресу 8192 была доступна память для глобальных данных.
Напишите гостевой код, который будет демонстрировать использование этой памяти.
Для лучшей демонстрации результирующее состояние регистров должно формироваться
на основе вычислений с использованием глобальных переменных.

4. Чтобы гостевой код мог получать данные из внешнего мира, реализуйте обработку
гипер-вызовов. Напишите код, демонстрирующий получение значения от гипервизора и
выполнение вычислений с использованием этого значения.

5. sand_vm_launch выполняет не все требования System V x86_64 ABI, дополните
функцию так, чтобы сохранялись и восстанавливались все callee-saved ресурсы.

6. Sand не использует EPT (второй уровень трансляции адресов). В результате,
исполняемый в sandbox, не может управлять трансляцией адресов самостоятельно.
К тому же гость не может использовать физическую память выше 4 гигабайт.
Сделайте простое отображение гостевой физической памяти в хостовую через EPT,
измените гостевые таблицы трансляции, чтобы отобразить гостевые виртуальные
адреса на гостевые физические один-к-одному.

7. Если в госте исполнить INT3 (инструкция 0xCC), то получится Triple Fault.
Реализуйте возможность обработки простейших исключений в sandbox. Пусть в момент,
когда приходит гостевое исключение, хост получает уведомление через
гипер-вызов.

Дополнительные задания:

*   Какие проблемы с организацией кода вы можете заметить. Попробуйте исправить
    код на свой вкус.

*   Есть ли в коде ошибки? Как их исправить?

*   При сборке модуля objtool ругается на странную работу со стеком в функции
    sand_vm_launch. Попробуйте при помощи аннотаций в коде объяснить objtool, что
    происходит.

